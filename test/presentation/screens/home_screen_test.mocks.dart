// Mocks generated by Mockito 5.4.0 from annotations
// in marvel/test/presentation/screens/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:marvel/domain/entity/character_list.dart' as _i4;
import 'package:marvel/presentation/controller/home_controller.dart' as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReactiveContext_0 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i3.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set carouselList(_i4.CharacterList? _carouselList) => super.noSuchMethod(
        Invocation.setter(
          #carouselList,
          _carouselList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set characters(_i4.CharacterList? _characters) => super.noSuchMethod(
        Invocation.setter(
          #characters,
          _characters,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get loadingCarousel => (super.noSuchMethod(
        Invocation.getter(#loadingCarousel),
        returnValue: false,
      ) as bool);
  @override
  set loadingCarousel(bool? _loadingCarousel) => super.noSuchMethod(
        Invocation.setter(
          #loadingCarousel,
          _loadingCarousel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get loadingList => (super.noSuchMethod(
        Invocation.getter(#loadingList),
        returnValue: false,
      ) as bool);
  @override
  set loadingList(bool? _loadingList) => super.noSuchMethod(
        Invocation.setter(
          #loadingList,
          _loadingList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFetchingMore => (super.noSuchMethod(
        Invocation.getter(#isFetchingMore),
        returnValue: false,
      ) as bool);
  @override
  set isFetchingMore(bool? _isFetchingMore) => super.noSuchMethod(
        Invocation.setter(
          #isFetchingMore,
          _isFetchingMore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);
}
